-- ===================================
-- V√âRIFICATION CONFIGURATION REALTIME
-- ===================================
-- Script pour v√©rifier que Realtime est correctement configur√©

-- ===================================
-- 1. V√©rifier que la table existe
-- ===================================
SELECT 
  table_name,
  table_type
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_name = 'session_counters';

-- R√©sultat attendu : 1 ligne avec table_name = 'session_counters'

-- ===================================
-- 2. V√©rifier que Realtime est activ√©
-- ===================================
SELECT 
  schemaname, 
  tablename, 
  publication_name
FROM pg_publication_tables
WHERE tablename = 'session_counters';

-- R√©sultat attendu : 1 ligne avec publication_name = 'supabase_realtime'
-- Si VIDE ‚Üí Realtime n'est PAS activ√©, voir instructions ci-dessous

-- ===================================
-- 3. V√©rifier les policies RLS
-- ===================================
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd
FROM pg_policies
WHERE tablename = 'session_counters'
ORDER BY policyname;

-- R√©sultat attendu : 4 policies
-- 1. Users can view own session counters (SELECT)
-- 2. Users can insert own session counters (INSERT)
-- 3. Users can update own session counters (UPDATE)
-- 4. Users can delete own session counters (DELETE)

-- ===================================
-- 4. V√©rifier la fonction increment_session_counter
-- ===================================
SELECT 
  proname as function_name,
  pg_get_function_arguments(oid) as arguments,
  pg_get_function_result(oid) as return_type,
  prosecdef as is_security_definer
FROM pg_proc
WHERE proname = 'increment_session_counter';

-- R√©sultat attendu : 1 fonction avec 3 arguments
-- Arguments: p_user_id uuid, p_month_key text, p_sport_type text
-- Return: integer
-- is_security_definer: true

-- ===================================
-- 5. V√©rifier les index
-- ===================================
SELECT 
  indexname,
  indexdef
FROM pg_indexes
WHERE tablename = 'session_counters'
ORDER BY indexname;

-- R√©sultat attendu : Au moins 3 index
-- - idx_session_counters_user
-- - idx_session_counters_month
-- - idx_session_counters_user_month

-- ===================================
-- 6. Tester l'incr√©mentation (TEST FONCTIONNEL)
-- ===================================
-- ‚ö†Ô∏è Remplacez 'YOUR_USER_ID' par votre vrai user_id

-- R√©cup√©rer votre user_id
SELECT auth.uid() as my_user_id;

-- Tester l'incr√©mentation
SELECT increment_session_counter(
  auth.uid(), -- Votre user_id
  TO_CHAR(NOW(), 'YYYY-MM'), -- Mois actuel
  'musculation' -- Type de sport
) as new_count;

-- R√©sultat attendu : Un nombre (le nouveau count)

-- V√©rifier que le compteur a √©t√© cr√©√©/mis √† jour
SELECT 
  user_id,
  month_key,
  sport_type,
  count,
  created_at,
  updated_at
FROM session_counters
WHERE user_id = auth.uid()
ORDER BY updated_at DESC
LIMIT 5;

-- R√©sultat attendu : Vous voyez votre compteur avec le bon count

-- ===================================
-- 7. DIAGNOSTIC COMPLET
-- ===================================

-- R√©sum√© de la configuration
SELECT 
  'Table exists' as check_type,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM information_schema.tables 
      WHERE table_name = 'session_counters'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå FAILED'
  END as status

UNION ALL

SELECT 
  'Realtime enabled' as check_type,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_publication_tables 
      WHERE tablename = 'session_counters'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå FAILED - Enable Realtime in Supabase Dashboard'
  END as status

UNION ALL

SELECT 
  'RLS Policies' as check_type,
  CASE 
    WHEN (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'session_counters') >= 4 
    THEN '‚úÖ OK'
    ELSE '‚ùå FAILED - Run create_session_counters_table.sql'
  END as status

UNION ALL

SELECT 
  'Function exists' as check_type,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_proc 
      WHERE proname = 'increment_session_counter'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå FAILED - Run create_session_counters_table.sql'
  END as status

UNION ALL

SELECT 
  'Indexes created' as check_type,
  CASE 
    WHEN (SELECT COUNT(*) FROM pg_indexes WHERE tablename = 'session_counters') >= 3 
    THEN '‚úÖ OK'
    ELSE '‚ùå FAILED - Run create_session_counters_table.sql'
  END as status;

-- ===================================
-- INSTRUCTIONS SI R√âALTIME N'EST PAS ACTIV√â
-- ===================================

/*
SI "Realtime enabled" = ‚ùå FAILED :

1. Aller dans le Dashboard Supabase
2. Cliquer sur "Database" dans le menu
3. Cliquer sur "Replication" en haut
4. Chercher la table "session_counters"
5. Cocher la case pour activer la r√©plication
6. Attendre quelques secondes
7. R√©-ex√©cuter ce script pour v√©rifier

ALTERNATIVE (si l'interface ne fonctionne pas) :

-- Activer Realtime manuellement via SQL
ALTER PUBLICATION supabase_realtime ADD TABLE session_counters;

-- V√©rifier
SELECT * FROM pg_publication_tables WHERE tablename = 'session_counters';
*/

-- ===================================
-- TEST DE SUBSCRIPTION (depuis l'application)
-- ===================================

/*
Dans votre application, ouvrez la console et cherchez :

üì° [WorkoutDistribution] Subscription status: SUBSCRIBED

Si vous voyez "CHANNEL_ERROR" :
- Realtime n'est pas activ√© ‚Üí Voir instructions ci-dessus
- Probl√®me de connexion ‚Üí V√©rifier le r√©seau
- Quotas Supabase d√©pass√©s ‚Üí V√©rifier votre plan

Si vous voyez "SUBSCRIBED" :
‚úÖ Realtime est correctement configur√© !

Pour tester :
1. Ouvrez User ‚Üí Performances
2. Ajoutez +1 s√©ance depuis Home
3. Le donut doit se mettre √† jour automatiquement
4. Console doit afficher : üîÑ [WorkoutDistribution] Realtime update
*/

-- ===================================
-- NETTOYAGE (si besoin de reset pour test)
-- ===================================

-- ‚ö†Ô∏è ATTENTION : Ceci supprime toutes les donn√©es de test
-- D√©commentez seulement si vous voulez nettoyer

-- DELETE FROM session_counters WHERE user_id = auth.uid();
